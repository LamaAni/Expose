classdef LVPortGlobals < AutoRemoveAutoIDMap
    methods
        function obj = LVPortGlobals(url)
            % call base class constructor.
            obj@AutoRemoveAutoIDMap(LVPortGlobals.PortAutoRemoveTime); % 5 minutes.
            
            % generates and implemetns all the LVPort globals
            % that are required to identify ports by the thire names/ids
            obj.Server=CSCom(url);
            
            % adding listener for message events.
            obj.Server.addlistenter('MessageRecived',@obj.OnMessageRecived);
            
            % adding listener for log events.
            obj.Server.addlistenter('Log',@obj.OnLog);
            
            % setting up the server.
            obj.Server.Listen();
        end
    end
    
    properties (SetAccess = protected)
        % global map with auto destroy.
        Server=[];
        PortsByID;
    end
    
    properties (Constant)
        PortAutoRemoveTime=5*60; % in seconds. 5 minutes.
    end
    
    methods
        % refrence to self since this is the port collection.
        function [rt]=get.PortsByID(obj)
            rt=obj;
        end
        
        function [id]=Register(obj,p,id)
            id=obj.setById(id,p);
            p.ID=id;
        end
    end
    
    methods(Access = protected)
        function OnMessageRecived(obj,s,e)
            % finding message info.
            meta=strsplit(e.Message);
            portID=[];
            
            command=meta{1};
            if(length(meta)>1)
                portID=meta{2};
            end
            
            if(~isempty(portID))
                if(~obj.contains(portID))
                    warning(['Recived message for portid: ',portID...
                        ,', but the port was not found.']);
                end
                obj(portID).Invoke(command,e);
            else
               obj.OnCommand(command,e); 
            end
        end
        
        function OnCommand(obj,command,e)
            % general command translation.
            data=e.UpdateObject();
            switch(command)
                case "make"
                    if(~ischar(data))
                        warning('Called to create an LVPort but not codepath was sent.');
                        e.Response=false;
                        return;
                    end
                    
                    LVPort.MakePort(
                case "destroy"
            end
        end
        
        function OnLog(obj,s,e)
            disp(e.Data);
        end

        % makes a new port.
        function [id,hasCodePath,compileErrors]=MakePort(codepath)  
            hasCodePath=0;
            compileErrors='';
            id=-1;
            if(exist('codepath','var') && ischar(codepath))
                if(~endsWith(codepath,'.m'))
                    codepath=[codepath,'.m'];
                end
                hasCodePath=1;
            end
            % create
            po=[]; % just to make sure we know it;
            if(hasCodePath)
                try
                    if(~exist(codepath,'file'))
                        error(['File not found "',codepath,'"']);
                    end
                    
                    [className]=LVPort.MakePortObjectTempCodeFile(codepath);
                    compileErrors=checkcode(codepath,'-string');                    
                    
                    po=eval(className);
                    if(~isa(po,'LVPortObject'))
                        error('Port classes must derive from calss "PortObject"');
                    end
                catch err
                    compileErrors=[compileErrors,err.message];
                    id='-1';
                    return;
                end
                id=className;
            else
                po=LVPortObject();
            end
            
            [id]=LVPort.RegisterPort(id,po.Port);
            if(isnumeric(id))
                id=num2str(id);
            end
        end
        
        function [className]=MakePortObjectTempCodeFile(fpath,autoAccess)
            if(~exist('autoAccess','var'))autoAccess=true;end
            className=LVPort.PathToLVID(fpath);
            tempdir=[pwd,'\','LVTemp'];
            if(~exist(tempdir,'file')) % check for folder.
                mkdir(tempdir);
            end
            
            if(autoAccess)
                addpath(tempdir);% make sure we can access it.
            end
            
            fname=[tempdir,'\',className,'.m'];
            code=fileread(fpath);
            code=regexprep(code,'(?<=classdef *)\w+',className,'ignorecase','once');
            
            % checking if exists, and if the same, then ignore write.
            % otherwise delete old.
            if(exist(fname,'file'))
                oldcode=fileread(fname);
                if(strcmp(oldcode,code))
                    return;
                end
                delete(fname);
            end
            
            % write all.
            fid=fopen(fname,'a');
            fprintf(fid,"%s",code);
            fclose(fid);
        end
        
        function [id]=PathToLVID(fpath)
            id=['P',lvport_hash(lower(fpath)),'C'];
        end

    end
end

